# worker.py

import time
import json
import os
import boto3
from datetime import date
from dotenv import load_dotenv
from sqlalchemy.orm import Session
from app.database import SessionLocal
from app import crud, models
import logging

SQS_QUEUE_URL = os.getenv("SQS_QUEUE_URL")

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("worker")

def _generate_report_content(db: Session, user_id: int, target_date: date):
    """실제 리포트 내용을 계산하는 함수"""
    # [TODO] DB에서 해당 사용자의 target_date 기록을 조회하고 분석하는 로직 구현
    
    # 임시 데이터 예시
    total_distance = 15.5
    total_duration_seconds = 5400

    content = {
        "date": target_date.isoformat(),
        "total_distance_km": total_distance,
        "total_duration_seconds": total_duration_seconds,
        "message": "Report generated by worker"
    }
    return content

def process_messages():
    """SQS 큐를 확인하고 메시지를 처리하는 메인 함수"""
    sqs_client = boto3.client('sqs')
    response = sqs_client.receive_message(
        QueueUrl=SQS_QUEUE_URL,
        MaxNumberOfMessages=1,
        WaitTimeSeconds=20  # 새 메시지가 올 때까지 최대 20초 대기
    )

    if "Messages" in response:
        message = response["Messages"][0]
        receipt_handle = message['ReceiptHandle']
        
        try:
            body = json.loads(message['Body'])
            report_id = body['report_id']
            user_id = body['user_id']
            target_date = date.fromisoformat(body['target_date'])
            
            print(f"Processing report_id: {report_id} for user_id: {user_id}")
            
            db = SessionLocal()
            report_content = _generate_report_content(db, user_id, target_date)

            log.info(f"Generated report content for report_id: {report_id}, {report_content}")
            crud.update_report_content(db, report_id, report_content, "COMPLETED")
            db.close()
            
            print(f"Report {report_id} completed successfully.")
            
            sqs_client.delete_message(
                QueueUrl=SQS_QUEUE_URL,
                ReceiptHandle=receipt_handle
            )
        except Exception as e:
            print(f"Error processing message: {e}")

if __name__ == "__main__":
    print("Starting Report Worker...")
    while True:
        process_messages()